# Copyright 2018 HummingLab
# Contributor(s) : yslee@humminglab.io
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""Dispaly LED Matrix"""

import logging
import spidev
import time

CMD_WR_CONTROL = 0x00
CMD_RD_CONTROL = 0x01
CMD_WR_PATTERN1 = 0x02
CMD_RD_PATTERN1 = 0x03
CMD_WR_PATTERN2 = 0x04
CMD_WR_PATTERN2 = 0x05

LED_WIDTH = 24
LED_HEIGHT = 5


class Disp():
    def __init__(self):
        self.active_frame = 0
        self.spi = spidev.SpiDev()
        self.spi.open(0, 0)


    def init_disf(self):
        # software reset
        cmd_reset = [CMD_WR_CONTROL, 0x00, 0x86]
        cmd_init = [
            CMD_WR_CONTROL,
            0x00, # 10h clock: default
            0xff, # 11h col1: all enable
            0xff, # 12h col2: all enable
            0xff, # 13h col3: all enable
            0x1f, # 14h row: all enable
            0x00, # 15h blanking: slallest, 2clock
            0x8a, # 16h boost: 4v, boost
        ]
        cmd_disp_on = [CMD_WR_CONTROL, 0x00, 0x01]

        self.spi.xfer(cmd_reset)
        time.sleep(0.1)
        self.spi.xfer(cmd_init)
        time.sleep(0.01)
        self.spi.xfer(cmd_disp_on)
        time.sleep(0.01)

        self.set_brightness(100)

    def set_brightness(self, level):
        cmd_section_b = [
            CMD_WR_CONTROL,
            0x20,
            0x02, # 20h disp visual PWMEN
            level # 21h pwm: max
        ]
        self.spi.xfer(cmd_section_b)

    def _str_to_fb(self, str):
        width = 0
        buf = []
        for c in str:
            a = ord(c)
            if 0x20 <= a <= 0x7e:
                width += font[a - 0x20][0]
                buf += font[a - 0x20][1]
            else:
                width += font[0][0]
                buf += font[0][1]
        return width, buf

    def disp_puts(self, str):
        width, strbuf = self._str_to_fb(str)
        offset = 0 if width >= LED_WIDTH else int((LED_WIDTH - width + 1 ) / 2)
        buf = [0, 0] * offset
        left = LED_WIDTH - offset
        if left > width:
            buf += strbuf
            buf += [0, 0] * (left - width)
        else:
            buf += strbuf[:left * 2]
        print(buf)
        self._send_to_led(buf)

    def _send_to_led(self, buf):
        cmd_disp_sel = [
            [CMD_WR_CONTROL, 0x01, 0x01], # disp 1
            [CMD_WR_CONTROL, 0x01, 0x02], # disp 2
        ]
        self.active_frame = 0 if self.active_frame else 1
        packet = [CMD_WR_PATTERN2, 0] if self.active_frame else [CMD_WR_PATTERN1, 0]
        packet += buf
        print(packet)
        self.spi.xfer(packet)
        self.spi.xfer(cmd_disp_sel[self.active_frame])


_font_base = [
    [1, [0x00, 0x00, 0x00, 0x00, 0x00]], # space 0x20
    [1, [0x17, 0x00, 0x00, 0x00, 0x00]], # ! 0x21
    [3, [0x03, 0x00, 0x03, 0x00, 0x00]], # " 0x22
    [5, [0x0a, 0x1f, 0x0a, 0x1f, 0x0a]], # # 0x23
    [4, [0x12, 0x15, 0x1f, 0x09, 0x00]], # $ 0x24
    [5, [0x13, 0x0b, 0x04, 0x1a, 0x19]], # % 0x25
    [4, [0x0a, 0x15, 0x0a, 0x10, 0x00]], # & 0x26
    [1, [0x01, 0x00, 0x00, 0x00, 0x00]], # ' 0x27
    [2, [0x0e, 0x11, 0x00, 0x00, 0x00]], # ( 0x28
    [2, [0x11, 0x0e, 0x00, 0x00, 0x00]], # ) 0x29
    [3, [0x04, 0x0a, 0x04, 0x00, 0x00]], # * 0x2a
    [3, [0x04, 0x0e, 0x04, 0x00, 0x00]], # + 0x2b
    [2, [0x10, 0x08, 0x00, 0x00, 0x00]], # , 0x2c
    [3, [0x04, 0x04, 0x04, 0x00, 0x00]], # - 0x2d
    [1, [0x10, 0x00, 0x00, 0x00, 0x00]], # . 0x2e
    [4, [0x10, 0x08, 0x04, 0x02, 0x00]], # / 0x2f
    [4, [0x1f, 0x11, 0x11, 0x1f, 0x00]], # 0 0x30
    [4, [0x00, 0x00, 0x1f, 0x00, 0x00]], # 1 0x31
    [4, [0x1d, 0x15, 0x15, 0x17, 0x00]], # 2 0x32
    [4, [0x15, 0x15, 0x15, 0x1f, 0x00]], # 3 0x33
    [4, [0x07, 0x04, 0x04, 0x1f, 0x00]], # 4 0x34
    [4, [0x17, 0x15, 0x15, 0x1d, 0x00]], # 5 0x35
    [4, [0x1f, 0x14, 0x14, 0x1c, 0x00]], # 6 0x36
    [4, [0x01, 0x01, 0x01, 0x1f, 0x00]], # 7 0x37
    [4, [0x1f, 0x15, 0x15, 0x1f, 0x00]], # 8 0x38
    [4, [0x07, 0x05, 0x05, 0x1f, 0x00]], # 9 0x39
    [1, [0x0a, 0x00, 0x00, 0x00, 0x00]], # : 0x3a
    [1, [0x1a, 0x00, 0x00, 0x00, 0x00]], # ; 0x3b
    [2, [0x04, 0x0a, 0x00, 0x00, 0x00]], # < 0x3c
    [3, [0x0a, 0x0a, 0x0a, 0x00, 0x00]], # = 0x3d
    [2, [0x0a, 0x04, 0x00, 0x00, 0x00]], # > 0x3e
    [3, [0x01, 0x15, 0x02, 0x00, 0x00]], # ? 0x3f
    [4, [0x0e, 0x15, 0x1b, 0x16, 0x00]], # * 0x40
    [4, [0x1e, 0x05, 0x05, 0x1e, 0x00]], # A 0x41
    [4, [0x1f, 0x15, 0x15, 0x0a, 0x00]], # B 0x42
    [4, [0x0e, 0x11, 0x11, 0x11, 0x00]], # C 0x43
    [4, [0x1f, 0x11, 0x11, 0x0e, 0x00]], # D 0x44
    [4, [0x1f, 0x15, 0x15, 0x15, 0x00]], # E 0x45
    [4, [0x1f, 0x05, 0x05, 0x01, 0x00]], # F 0x46
    [4, [0x1f, 0x11, 0x15, 0x1d, 0x00]], # G 0x47
    [4, [0x1f, 0x04, 0x04, 0x1f, 0x00]], # H 0x48
    [3, [0x11, 0x1f, 0x11, 0x00, 0x00]], # I 0x49
    [3, [0x10, 0x10, 0x0f, 0x00, 0x00]], # J 0x4a
    [4, [0x1f, 0x04, 0x0a, 0x11, 0x00]], # K 0x4b
    [4, [0x1f, 0x10, 0x10, 0x10, 0x00]], # L 0x4c
    [5, [0x1f, 0x02, 0x04, 0x02, 0x1f]], # M 0x4d
    [4, [0x1f, 0x02, 0x04, 0x1f, 0x00]], # N 0x4e
    [4, [0x1f, 0x11, 0x11, 0x1f, 0x00]], # O 0x4f
    [4, [0x1f, 0x05, 0x05, 0x07, 0x00]], # P 0x50
    [4, [0x1f, 0x11, 0x19, 0x1f, 0x00]], # Q 0x51
    [4, [0x1f, 0x05, 0x0d, 0x16, 0x00]], # R 0x52
    [4, [0x17, 0x15, 0x15, 0x1d, 0x00]], # S 0x53
    [5, [0x01, 0x01, 0x1f, 0x01, 0x01]], # T 0x54
    [4, [0x0f, 0x10, 0x10, 0x0f, 0x00]], # U 0x55
    [5, [0x07, 0x08, 0x10, 0x08, 0x07]], # V 0x56
    [5, [0x0f, 0x10, 0x0c, 0x10, 0x0f]], # W 0x57
    [5, [0x11, 0x0a, 0x04, 0x0a, 0x11]], # X 0x58
    [5, [0x01, 0x02, 0x1c, 0x02, 0x01]], # Y 0x59
    [5, [0x11, 0x19, 0x15, 0x13, 0x11]], # Z 0x5a
    [2, [0x1f, 0x11, 0x00, 0x00, 0x00]], # [ 0x5b
    [4, [0x02, 0x04, 0x08, 0x10, 0x00]], # \ 0x5c
    [2, [0x11, 0x1f, 0x00, 0x00, 0x00]], # ] 0x5d
    [3, [0x02, 0x01, 0x02, 0x00, 0x00]], # ^ 0x5e
    [4, [0x10, 0x10, 0x10, 0x10, 0x00]], # _ 0x5f
    [2, [0x01, 0x02, 0x00, 0x00, 0x00]], # ` 0x60
    [4, [0x08, 0x15, 0x15, 0x1e, 0x00]], # a 0x61
    [4, [0x1f, 0x14, 0x14, 0x08, 0x00]], # b 0x62
    [4, [0x0c, 0x12, 0x12, 0x12, 0x00]], # c 0x63
    [4, [0x08, 0x14, 0x14, 0x1f, 0x00]], # d 0x64
    [4, [0x0c, 0x16, 0x16, 0x14, 0x00]], # e 0x65
    [4, [0x04, 0x1f, 0x05, 0x04, 0x00]], # f 0x66
    [4, [0x0a, 0x15, 0x15, 0x0f, 0x00]], # g 0x67
    [4, [0x1f, 0x04, 0x04, 0x1f, 0x00]], # h 0x68
    [3, [0x00, 0x1d, 0x00, 0x00, 0x00]], # i 0x69
    [3, [0x10, 0x10, 0x0d, 0x00, 0x00]], # j 0x6a
    [4, [0x1e, 0x08, 0x0c, 0x12, 0x00]], # k 0x6b
    [3, [0x00, 0x0f, 0x10, 0x00, 0x00]], # l 0x6c
    [5, [0x1c, 0x02, 0x04, 0x02, 0x1c]], # m 0x6d
    [4, [0x1e, 0x02, 0x02, 0x1c, 0x00]], # n 0x6e
    [4, [0x0c, 0x12, 0x12, 0x0c, 0x00]], # o 0x6f
    [4, [0x1e, 0x0a, 0x0a, 0x04, 0x00]], # p 0x70
    [4, [0x04, 0x0a, 0x0a, 0x1e, 0x00]], # q 0x71
    [4, [0x1e, 0x04, 0x02, 0x02, 0x00]], # r 0x72
    [4, [0x14, 0x16, 0x1a, 0x0a, 0x00]], # s 0x73
    [4, [0x04, 0x1e, 0x14, 0x04, 0x00]], # t 0x74
    [4, [0x0e, 0x10, 0x10, 0x0e, 0x00]], # u 0x75
    [5, [0x06, 0x08, 0x10, 0x08, 0x06]], # v 0x76
    [5, [0x0e, 0x10, 0x08, 0x10, 0x0e]], # w 0x77
    [4, [0x12, 0x0c, 0x0c, 0x12, 0x00]], # x 0x78
    [4, [0x02, 0x04, 0x04, 0x1e, 0x00]], # y 0x79
    [4, [0x12, 0x1a, 0x16, 0x12, 0x00]], # z 0x7a
    [3, [0x04, 0x1b, 0x11, 0x00, 0x00]], # { 0x7b
    [1, [0x1b, 0x00, 0x00, 0x00, 0x00]], # | 0x7c
    [3, [0x11, 0x1b, 0x04, 0x00, 0x00]], # } 0x7d
    [4, [0x08, 0x04, 0x04, 0x02, 0x00]], # ~ 0x7e
]

# padding S&D filed
font = []
for x in _font_base:
    buf = []
    for line in x[1]:
        buf += [line, 0]
    font.append([x[0], buf])

if __name__ == '__main__':
    disp = Disp()
    disp.disp_puts("hello")
